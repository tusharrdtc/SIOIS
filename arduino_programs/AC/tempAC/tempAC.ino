/*//unsigned int d1[233] = {0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0};
//int i,j,t1;
#define LEDPIN 13
#define maxLen 800
volatile  unsigned int irBuffer[maxLen]; 
volatile unsigned int x = 0;
void setup()
{
  Serial.begin(9600);
  attachInterrupt(0, rxIR_Interrupt_Handler, CHANGE);  
}
void loop()
{
  //unsigned int d1[233] = {0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0};
  int i,j,t1;
  delay(5000);
  /*for(j=0;j<234;j++)
  {
    Serial.print(d1[j]);
    Serial.println(",");
  }
  Serial.println("");
  unsigned int  d2[]={}; 
  if (x) 
   {   
     digitalWrite(LEDPIN, HIGH);                 
     Serial.println("captured signal is:");
     detachInterrupt(0);                                       
     for ( i = 1; i < x; i++)
       { 
        d2[i]=(irBuffer[i] - irBuffer[i - 1]);
         t1=i;
       }
        //Serial.println("");
        //data();
       for( i=0;i<t1;i++)
        {
         if(d2[i]<700)
         {
          Serial.print("0");
          Serial.print(",");
         }
        else
        {
         Serial.print("1");
         Serial.print(",");
        }
      }
  }
    x = 0;
    digitalWrite(LEDPIN, LOW);
    attachInterrupt(0, rxIR_Interrupt_Handler, CHANGE);       //re-enable ISR for receiving IR signal
}
void rxIR_Interrupt_Handler() 
  {
    if (x > maxLen) return;                                    //ignore if irBuffer is already full
    irBuffer[x++] = micros();                                  //just continually record the time-stamp of signal transitions
  }*/
/*void data()
{
  for(i=0;i<t1;i++)
  {
    if(d[i]<700)
    {
      Serial.print("0");
      Serial.print(",");
    }
    else
    {
    Serial.print("1");
    Serial.print(",");
    }
  }
  
}*/
/*
unsigned int data[] = {600, 17884, 3004, 8936, 512, 432, 560, 1428, 556, 432, 560, 440, 552, 436, 556, 440, 552, 440, 488, 504, 552, 448, 544, 1440, 552, 440, 548, 448, 548, 1460, 456, 536, 460, 536, 456, 1524, 556, 1432, 552, 1432, 556, 1432, 556, 1428, 556, 440, 552, 440, 556, 444, 552, 468, 524, 444, 548, 448, 548, 496, 492, 500, 424, 536, 460, 536, 516, 472, 520, 472, 556, 440, 552, 440, 552, 472, 456, 504, 488, 508, 484, 508, 544, 448, 488, 508, 484, 508, 484, 540, 512, 456, 544, 448, 480, 532, 460, 536, 516, 476, 520, 472, 524, 504, 424, 532, 548, 444, 488, 508, 488, 1496, 556, 1428, 560, 1432, 588, 1396, 484, 3000, 3020, 8904, 552, 1488, 496, 460, 524, 472, 524, 468, 460, 536, 520, 472, 528, 464, 556, 440, 556, 468, 524, 1428, 552, 440, 556, 472, 524, 432, 560, 436, 556, 1464, 452, 1504, 552, 444, 548, 1456, 460, 1528, 528, 1456, 556, 1432, 556, 1428, 560, 1428, 556, 1484, 500, 1432, 556, 440, 556, 436, 552, 444, 552, 1472, 512, 1452, 532, 1456, 560, 488, 504, 436, 556, 436, 560, 436, 556, 488, 504, 436, 560, 432, 556, 436, 560, 1480, 504, 1432, 552, 1440, 548, 440, 552, 1516, 472, 1452, 536, 460, 556, 496, 500, 488, 504, 436, 556, 436, 556, 472, 524, 432, 560, 1428, 556, 1432, 556, 1428, 556, 1488, 524,}; 
int t1,i;
void setup()
{
  Serial.begin(9600);
  size_t t1 = sizeof(data) / sizeof(int);
  Serial.println(t1);
  for(i=0;i<t1;i++)
  {
    if(data[i]<700)
    {
      Serial.print("0");
      Serial.print(",");
    }
    else
    {
    Serial.print("1");
    Serial.print(",");
    }
  }
}
void loop()
{
  
}*/
//unsigned int d1[233] = {0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0};
unsigned int data[233] = {576, 17904, 2992, 8896, 552, 520, 472, 1456, 528, 464, 532, 460, 560, 436, 556, 436, 560, 488, 504, 432, 560, 492, 500, 1476, 512, 432, 560, 432, 560, 1428, 560, 436, 556, 440, 552, 1456, 532, 1504, 516, 1416, 596, 1392, 556, 1428, 560, 496, 496, 488, 508, 432, 560, 436, 556, 436, 556, 436, 560, 436, 556, 436, 556, 436, 556, 440, 552, 448, 548, 460, 532, 464, 528, 496, 496, 496, 496, 464, 556, 436, 560, 432, 560, 432, 560, 436, 560, 484, 508, 468, 524, 436, 556, 436, 556, 440, 552, 440, 552, 444, 552, 440, 544, 452, 480, 532, 524, 504, 424, 532, 464, 1524, 524, 1464, 552, 1468, 520, 1428, 556, 2932, 2960, 8960, 540, 1448, 524, 472, 516, 476, 516, 480, 512, 480, 536, 480, 512, 484, 512, 480, 504, 488, 508, 1480, 532, 460, 536, 456, 540, 1448, 536, 1448, 540, 452, 540, 1448, 536, 456, 536, 1452, 536, 1448, 536, 1476, 512, 1476, 504, 1480, 508, 1476, 536, 1452, 536, 1452, 532, 460, 536, 456, 512, 480, 536, 1452, 536, 1452, 508, 1476, 536, 480, 512, 484, 508, 484, 508, 484, 508, 484, 508, 1480, 508, 1476, 536, 460, 512, 1472, 536, 1448, 540, 456, 536, 1452, 536, 456, 536, 1448, 536, 460, 536, 480, 512, 484, 476, 516, 532, 460, 532, 460, 536, 456, 540, 1448, 540, 1444, 540, 1448, 540, 1444, 540};

int t1,i;
void setup()
{
  Serial.begin(9600);
  size_t t1 = sizeof(data) / sizeof(int);
  Serial.println(t1);
  for(i=0;i<t1;i++)
  {
    if(data[i]<700)
    {
      Serial.print("0");
      //Serial.print(",");
    }
    else
    {
    Serial.print("1");
    //Serial.print(",");
    }
  }
}
void loop()
{
  
}/*
int a=1000000000101000101010101010101000000010101000000000000000001010100010100000000000000010101010;
void setup()
{
  Serial.begin(9600);
  Serial.print(a,HEX);
}
void loop()
{
  
}

#define LEDPIN 13
#define maxLen 800
volatile  unsigned int irBuffer[maxLen]; 
volatile unsigned int x = 0;
unsigned int temp1[]={};
/*unsigned int on[32]={7,'e','b',5,5,'c',4,'b',1,6,'f','f',4,'e',7,3,'b',9,'f',7,0,9,2,3,2,8,9,2,1,'b',6};
unsigned int off[32]={'c',7,8,'c',9,9,2,'e','b','d',0,'b',4,'f','b',0,6,'b',5,'c','d',2,'d',7,0,'e','f',9,4,5,4,'b'};
unsigned int t30[32]={8,'f',6,6,5,8,'a',3,0,6,'d',3,7,'b',2,'a',2,9,2,'b','f',7,6,0,5,1,'a',0,5,7,2,7};
unsigned int t29[32]={'c',6,7,8,3,'d','b',3,0,'f',0,6,1,4,'d',9,5,'c',0,'b',4,5,'a',7,2,4,4,9,'e',5,'a',5};
unsigned int t28[32]={'d',5,6,6,0,6,'c',2,'a','a',4,'a','b',4,0,'c',8,'d',1,1,4,1,9,'a',7,7,3,'b',4,'d',7,'f'};
unsigned int  t27[32]={6,6,'a','b',5,0,0,0,'c',4,'d',2,'d',9,7,'a',0,6,0,'f',6,1,5,'e','b',3,'d','d',8,5,2,6};
*/
/*void setup() 
  {
    
     Serial.begin(9600); //change BAUD rate as required
     attachInterrupt(0, rxIR_Interrupt_Handler, CHANGE);       
   }

void loop() 
  {
    unsigned int temp[]={};
   delay(5000);                                                // pause 5 secs
   if (x) 
   {                  
     digitalWrite(LEDPIN, HIGH);                               //visual indicator that signal received
     detachInterrupt(0);                                       //stop interrupts & capture until finshed here

     for (int i = 1; i < x; i++)
       {       
         temp[i]=(irBuffer[i] - irBuffer[i - 1]);
         Serial.print(temp[i]);
         Serial.print(F(", "));
        temp1[i]=temp[i];
        }
        delay(1000);
     
     x = 0;
      //bin();
     digitalWrite(LEDPIN, LOW);                                //end of visual indicator, for this time
     attachInterrupt(0, rxIR_Interrupt_Handler, CHANGE);       //re-enable ISR for receiving IR signal
    }

 }

  void rxIR_Interrupt_Handler() 
  {
    if (x > maxLen) return;                                    //ignore if irBuffer is already full
    irBuffer[x++] = micros();                                  //just continually record the time-stamp of signal transitions

   }
 void bin()
{
  //int t1;
  Serial.begin(9600);
  size_t t1 = sizeof(temp1) / sizeof(int);
  Serial.println(t1);
  delay(1000);
  for(int i=0;i<t1;i++)
  {
    if(temp1[i]<700)
    {
      Serial.print("0");
      Serial.print(",");
    }
    else
    {
    Serial.print("1");
    Serial.print(",");
    }
  }
}*/
